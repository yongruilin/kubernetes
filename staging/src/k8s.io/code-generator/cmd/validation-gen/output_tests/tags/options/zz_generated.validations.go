//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by validation-gen. DO NOT EDIT.

package options

import (
	fmt "fmt"

	operation "k8s.io/apimachinery/pkg/api/operation"
	safe "k8s.io/apimachinery/pkg/api/safe"
	validate "k8s.io/apimachinery/pkg/api/validate"
	field "k8s.io/apimachinery/pkg/util/validation/field"
	testscheme "k8s.io/code-generator/cmd/validation-gen/testscheme"
)

func init() { localSchemeBuilder.Register(RegisterValidations) }

// RegisterValidations adds validation functions to the given scheme.
// Public to allow building arbitrary schemes.
func RegisterValidations(scheme *testscheme.Scheme) error {
	scheme.AddValidationFunc((*Struct)(nil), func(opCtx operation.Context, obj, oldObj interface{}, subresources ...string) field.ErrorList {
		if len(subresources) == 0 {
			return Validate_Struct(opCtx, nil /* fldPath */, obj.(*Struct), safe.Cast[*Struct](oldObj))
		}
		return field.ErrorList{field.InternalError(nil, fmt.Errorf("no validation found for %T, subresources: %v", obj, subresources))}
	})
	return nil
}

func Validate_Struct(opCtx operation.Context, fldPath *field.Path, obj, oldObj *Struct) (errs field.ErrorList) {
	// field Struct.TypeMeta has no validation

	// field Struct.XEnabledField
	errs = append(errs,
		func(fldPath *field.Path, obj, oldObj *string) (errs field.ErrorList) {
			errs = append(errs, func() field.ErrorList {
				if opCtx.Options.Has("FeatureX") {
					return validate.FixedResult(opCtx, fldPath, obj, oldObj, false, "field Struct.XEnabledField")
				} else {
					return nil // skip validation
				}
			}()...)
			return
		}(fldPath.Child("xEnabledField"), &obj.XEnabledField, safe.Field(oldObj, func(oldObj *Struct) *string { return &oldObj.XEnabledField }))...)

	// field Struct.XDisabledField
	errs = append(errs,
		func(fldPath *field.Path, obj, oldObj *string) (errs field.ErrorList) {
			errs = append(errs, func() field.ErrorList {
				if !opCtx.Options.Has("FeatureX") {
					return validate.FixedResult(opCtx, fldPath, obj, oldObj, false, "field Struct.XDisabledField")
				} else {
					return nil // skip validation
				}
			}()...)
			return
		}(fldPath.Child("xDisabledField"), &obj.XDisabledField, safe.Field(oldObj, func(oldObj *Struct) *string { return &oldObj.XDisabledField }))...)

	// field Struct.YEnabledField
	errs = append(errs,
		func(fldPath *field.Path, obj, oldObj *string) (errs field.ErrorList) {
			errs = append(errs, func() field.ErrorList {
				if opCtx.Options.Has("FeatureY") {
					return validate.FixedResult(opCtx, fldPath, obj, oldObj, false, "field Struct.YEnabledField")
				} else {
					return nil // skip validation
				}
			}()...)
			return
		}(fldPath.Child("yEnabledField"), &obj.YEnabledField, safe.Field(oldObj, func(oldObj *Struct) *string { return &oldObj.YEnabledField }))...)

	// field Struct.YDisabledField
	errs = append(errs,
		func(fldPath *field.Path, obj, oldObj *string) (errs field.ErrorList) {
			errs = append(errs, func() field.ErrorList {
				if !opCtx.Options.Has("FeatureY") {
					return validate.FixedResult(opCtx, fldPath, obj, oldObj, false, "field Struct.YDisabledField")
				} else {
					return nil // skip validation
				}
			}()...)
			return
		}(fldPath.Child("yDisabledField"), &obj.YDisabledField, safe.Field(oldObj, func(oldObj *Struct) *string { return &oldObj.YDisabledField }))...)

	// field Struct.XYMixedField
	errs = append(errs,
		func(fldPath *field.Path, obj, oldObj *string) (errs field.ErrorList) {
			errs = append(errs, func() field.ErrorList {
				if !opCtx.Options.Has("FeatureY") {
					return validate.FixedResult(opCtx, fldPath, obj, oldObj, false, "field Struct.XYMixedField/Y")
				} else {
					return nil // skip validation
				}
			}()...)
			errs = append(errs, func() field.ErrorList {
				if opCtx.Options.Has("FeatureX") {
					return validate.FixedResult(opCtx, fldPath, obj, oldObj, false, "field Struct.XYMixedField/X")
				} else {
					return nil // skip validation
				}
			}()...)
			return
		}(fldPath.Child("xyMixedField"), &obj.XYMixedField, safe.Field(oldObj, func(oldObj *Struct) *string { return &oldObj.XYMixedField }))...)

	return errs
}
